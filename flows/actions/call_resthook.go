package actions

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/nyaruka/goflow/flows"
	"github.com/nyaruka/goflow/flows/events"

	"github.com/pkg/errors"
)

func init() {
	RegisterType(TypeCallResthook, func() flows.Action { return &CallResthookAction{} })
}

// TypeCallResthook is the type for the call resthook action
const TypeCallResthook string = "call_resthook"

// CallResthookAction can be used to call a resthook.
//
// A [event:webhook_called] event will be created for each subscriber of the resthook with the results
// of the HTTP call. If the action has `result_name` set, a result will
// be created with that name, and if the resthook returns valid JSON, that will be accessible
// through `extra` on the result.
//
//   {
//     "uuid": "8eebd020-1af5-431c-b943-aa670fc74da9",
//     "type": "call_resthook",
//     "resthook": "new-registration"
//   }
//
// @action call_resthook
type CallResthookAction struct {
	BaseAction
	onlineAction

	Resthook   string `json:"resthook" validate:"required"`
	ResultName string `json:"result_name,omitempty"`
}

// NewCallResthookAction creates a new call resthook action
func NewCallResthookAction(uuid flows.ActionUUID, resthook string, resultName string) *CallResthookAction {
	return &CallResthookAction{
		BaseAction: NewBaseAction(TypeCallResthook, uuid),
		Resthook:   resthook,
		ResultName: resultName,
	}
}

// Execute runs this action
func (a *CallResthookAction) Execute(run flows.FlowRun, step flows.Step, logModifier flows.ModifierCallback, logEvent flows.EventCallback) error {
	// NOOP if resthook doesn't exist
	resthook := run.Session().Assets().Resthooks().FindBySlug(a.Resthook)
	if resthook == nil {
		return nil
	}

	// build our payload
	payload, err := run.EvaluateTemplate(flows.LegacyWebhookPayload)
	if err != nil {
		// if we got an error then our payload is likely not valid JSON
		return errors.Wrapf(err, "error evaluating resthook payload")
	}

	// check the payload is valid JSON - it ends up in the session so needs to be valid
	if !json.Valid([]byte(payload)) {
		return errors.Errorf("resthook payload evaluation produced invalid JSON: %s", payload)
	}

	// regardless of what subscriber calls we make, we need to record the payload that would be sent
	logEvent(events.NewResthookCalledEvent(a.Resthook, json.RawMessage(payload)))

	// make a call to each subscriber URL
	calls := make([]flows.HTTPCall, 0, len(resthook.Subscribers()))

	for _, url := range resthook.Subscribers() {
		req, err := http.NewRequest("POST", url, strings.NewReader(payload))
		if err != nil {
			logEvent(events.NewErrorEvent(err))
			return nil
		}

		req.Header.Add("Content-Type", "application/json")

		call, err := run.Session().Engine().HTTPService().Request(req, a.Resthook)

		if err != nil {
			logEvent(events.NewErrorEvent(err))
		} else {
			calls = append(calls, call)
			logEvent(events.NewWebhookCalledEvent(call))
		}
	}

	asResult := a.pickResultWebhook(calls)
	if a.ResultName != "" {
		if asResult != nil {
			a.saveWebhookResult(run, step, a.ResultName, asResult, logEvent)
		} else {
			a.saveResult(run, step, a.ResultName, "no subscribers", "Failure", "", "", nil, logEvent)
		}
	}

	return nil
}

// picks one of the resthook calls to become the result generated by this action
func (a *CallResthookAction) pickResultWebhook(calls []flows.HTTPCall) flows.HTTPCall {
	var lastSuccess, last410, lastFailure flows.HTTPCall

	for _, call := range calls {
		switch call.Status() {
		case flows.HTTPStatusSuccess:
			lastSuccess = call
		case flows.HTTPStatusSubscriberGone:
			last410 = call
		default:
			lastFailure = call
		}
	}

	// 1. if we got one or more errors (non-410, non-200), result is last failure
	// 2. if we no errors, no 410s, but at least one success, result is last success
	// 3. if we only got 410s, result is last 410
	if lastFailure != nil {
		return lastFailure
	} else if lastSuccess != nil {
		return lastSuccess
	}
	return last410
}

// Results enumerates any results generated by this flow object
func (a *CallResthookAction) Results(node flows.Node, include func(*flows.ResultInfo)) {
	if a.ResultName != "" {
		include(flows.NewResultInfo(a.ResultName, webhookCategories, node))
	}
}
